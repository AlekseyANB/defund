syntax = "proto3";
package defundlabs.defund.broker;

// this line is used by starport scaffolding # proto/tx/import

option go_package = "github.com/defund-labs/defund/x/broker/types";

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";

// Msg defines the Msg service.
service Msg {
    // Register defines a rpc handler for MsgRegisterBrokerAccount
    rpc RegisterBrokerAccount(MsgRegisterBrokerAccount) returns (MsgRegisterBrokerAccountResponse);
    // CosmosSwap defines a rpc handler for MsgCosmosSwap
    rpc CosmosSwap(MsgCosmosSwap) returns (MsgCosmosSwapResponse);
    // this line is used by starport scaffolding # proto/tx/rpc
}

// MsgRegisterBrokerAccount defines the payload for Msg/RegisterBrokerAccount
message MsgRegisterBrokerAccount {
    option (gogoproto.equal)           = false;
    option (gogoproto.goproto_getters) = false;
  
    string owner                      = 1;
    string connection_id              = 2 [(gogoproto.moretags) = "yaml:\"connection_id\""];
  }
  
  // MsgRegisterBrokerAccountResponse defines the response for Msg/RegisterBrokerAccount
  message MsgRegisterBrokerAccountResponse {}
  
  // MsgCosmosSwap defines the payload for Msg/CosmosSwap
  message MsgCosmosSwap {
    option (gogoproto.equal)           = false;
    option (gogoproto.goproto_getters) = false;
  
    string owner                       = 1;
    string connection_id = 2 [(gogoproto.moretags) = "yaml:\"connection_id\""];
    google.protobuf.Any msg            = 3;
  }
  
  // MsgCosmosSwapResponse defines the response for Msg/CosmosSwap
  message MsgCosmosSwapResponse {}

// this line is used by starport scaffolding # proto/tx/message